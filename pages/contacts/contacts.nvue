<template>
	<view class="uni-container">
		
		<u-modal v-model="showAddGroup" title="创建群组" :show-cancel-button="true" :title-style="{color: 'red'}">
			<u-form style="margin-left: 20rpx;">
				<u-form-item label="群ID"><u-input  /></u-form-item>
				<u-form-item label="群名"><u-input  /></u-form-item>
			</u-form>
		</u-modal>
		
		<uni-popup id="addFriend" ref="addFriend" type="dialog">
			<uni-popup-dialog mode="input" title="查找用户" :value="addUserID" placeholder="输入用户ID" @confirm="handleAddFriend"></uni-popup-dialog>
		</uni-popup>
		
		<uni-popup id="addGroup" ref="addGroup" type="dialog">
			<uni-popup-dialog mode="input" title="查找群组" :value="addGroupID" placeholder="输入群ID" @confirm="handleAddGroup"></uni-popup-dialog>
		</uni-popup>
		
		<!-- <uni-list-item link title="发起会话" ></uni-list-item> -->
		<uni-list-item link title="发起群聊" @click="showAddGroup=true"></uni-list-item>
		<uni-list-item link title="加入群聊" @click="openDialog('addGroup')"></uni-list-item>
		<uni-list-item link title="添加好友" @click="openDialog('addFriend')"></uni-list-item>
		
		<uni-list :border="false" v-for="n in userRelation" style="margin-top: 30rpx;">
			<uni-list-item 
				link="true"
				showArrow="false"
				:to="`../../components/HM-chat/HM-chat?conversationID=C2C${n.userID}&type=C2C&to=${n.userID}`"
			>
				<view slot="header" class="slot-box">
					<image class="slot-image" :src="n.userAvatar?n.userAvatar:'/static/logo.png'" mode="widthFix"></image>
				</view>
				<text slot="body" class="slot-box slot-text">{{n.userNick?n.userNick:n.userID}}</text>
			</uni-list-item>
		</uni-list>
	</view>
</template>

<script>
	import TIM from 'tim-js-sdk';
	export default {
		data() {
			return {
				userRelation:[
					{
						userID:'',
						userAvatar:'',
						userNick:''
					}
				],
				showAddGroup:false,
				addUserID:'',
				addGroupID:''
			}
		},
		computed:{
			getUserProfile(){
				return this.$store.state.userProfile
			}
		},
		onShow() {
			this.getUserRelation()
		},
		methods: {
			getUserRelation(){
				this.Request.GetUserRelation(this.getUserProfile.userID)
				.then((res)=>{
					// console.log(res.data.data.UserProfileItem)
					this.transUserRelation(res.data.data.UserProfileItem)
				})
			},
			transUserRelation(relation){
				if (!relation){
					this.userRelation = []
					return
				}
				
				let reaList = []
				relation.forEach(item=>{
					let rea = {
						userID: item.To_Account,
						userNick: '',
						userAvatar: ''
					}
					item.ProfileItem.forEach(i=>{
						if (i.Tag == "Tag_Profile_IM_Nick"){
							rea.userNick = i.Value
						}
						if (i.Tag == "Tag_Profile_IM_Image"){
							rea.userAvatar = i.Value
						}
					})
					reaList.push(rea)
				})
				console.log(reaList)
				this.userRelation = reaList
			},
			openDialog(type){
				this.$refs[type].open()
			},
			handleAddFriend(done, val) {
				uni.showLoading({
					title: '正在查找'
				})
				console.log(val);
				// this.value = val
				this.Request.AddUserRelation({userID:this.getUserProfile.userID,userName:val})
				.then(res=>{
					console.log(res)
					if(res.data.code == 200){
						uni.showToast({
						    title: '添加成功',
						    duration: 2000
						});
						this.getUserRelation()
					}
					else{
						uni.showToast({
						    title: res.data.message,
								icon:'none',
						    duration: 2000
						});
					}
					uni.hideLoading()
					// 关闭窗口后，恢复默认内容
					done()
				})
				// setTimeout(() => {
				// 	uni.hideLoading()
				// 	// 关闭窗口后，恢复默认内容
				// 	done()
				// }, 3000)
			},
			
			// 查找群信息
			handleAddGroup(done, val){
				let promise = this.Tim.getGroupProfile({ groupID: val, groupCustomFieldFilter: ['open'] });
				promise.then((imResponse) => {
				  console.log(imResponse.data.group);
					uni.showModal({
					    title: '是否申请加入',
					    content: imResponse.data.group.name,
					    success: (res) => {
					        if (res.confirm) {
					            console.log('用户点击确定');
											this.joinGroup(val)
					        } else if (res.cancel) {
					           console.log('用户点击取消');
					        }
									done()
					    }
					});
				}).catch(function(imError) {
				  console.warn('getGroupProfile error:', imError); // 获取群详细资料失败的相关信息
					uni.showToast({
					    title: '没有找到该群',
							icon:'none',
					    duration: 2000
					});
				});
			},
			
			// 申请加群操作
			joinGroup(groupID){
				let promise = this.Tim.joinGroup({ groupID,});
				promise.then(function(imResponse) {
				  switch (imResponse.data.status) {
				    case TIM.TYPES.JOIN_STATUS_WAIT_APPROVAL: // 等待管理员同意
							uni.showToast({
									title: '请等待管理员同意',
									icon:'none',
									duration: 2000
							});
				      break;
				    case TIM.TYPES.JOIN_STATUS_SUCCESS: // 加群成功
				      console.log(imResponse.data.group); // 加入的群组资料
				      break;
				    case TIM.TYPES.JOIN_STATUS_ALREADY_IN_GROUP: // 已经在群中
							uni.showToast({
									title: '已经在群中了',
									icon:'none',
									duration: 2000
							});
				      break;
				    default:
				      break;
				  }
				}).catch(function(imError){
				  console.warn('joinGroup error:', imError); // 申请加群失败的相关信息
				});
			},
			
			// 创建群
			createNewGroup(){
				// 创建好友工作群
				let promise = tim.createGroup({
				  type: TIM.TYPES.GRP_WORK,
				  name: 'WebSDK',
				  memberList: [{
				    userID: 'user1',
				    // 群成员维度的自定义字段，默认情况是没有的，需要开通，详情请参阅自定义字段
				    memberCustomField: [{key: 'group_member_test', value: 'test'}]
				  }, {
				    userID: 'user2'
				  }] // 如果填写了 memberList，则必须填写 userID
				});
				promise.then(function(imResponse) { // 创建成功
				  console.log(imResponse.data.group); // 创建的群的资料
				}).catch(function(imError) {
				  console.warn('createGroup error:', imError); // 创建群组失败的相关信息
				});
			}
		}
	}
</script>

<style>
	.slot-box {
		/* #ifndef APP-NVUE */
		display: flex;
		/* #endif */
		flex-direction: row;
		align-items: center;
	}

	.slot-image {
		/* #ifndef APP-NVUE */
		display: block;
		/* #endif */
		margin-right: 15px;
		width: 30px;
		height: 30px;
	}

	.slot-text {
		flex: 1;
		font-size: 15px;
		font-weight: bold;
		/* color: #4cd964; */
		margin-right: 10px;
	}
</style>
